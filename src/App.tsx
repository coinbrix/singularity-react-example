/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

 import React, {Component } from 'react';
 import { Switch,  TouchableOpacity } from 'react-native';
 import { StyleSheet, Text, TextInput, Button, View, NativeModules, Alert, NativeEventEmitter } from 'react-native';
 import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'
 const { SingularityWrapper } = NativeModules;

 export default class App extends Component<{}> {
  eventEmitter = new NativeEventEmitter(SingularityWrapper);
  state = {
    key: 'neobrix',
    environment: "1"
  }
   
 
   render() {
     return (
       <KeyboardAwareScrollView>
         <Text style={styles.welcome}>☆Singularity Sample App☆</Text>
         <View style={styles.cell}>
           <Text style={styles.category}>Key</Text>
           <TextInput style={styles.values} defaultValue={'neobrix'} onChangeText={text => { this.state.key = text }} />
         </View>
         <View style={styles.cell}>
           <Text style={styles.category}>Environment</Text>
           <TextInput style={styles.values} defaultValue={'1'} onChangeText={text => { this.state.environment = text }} />
         </View>
         
         <Button title={'Login'} onPress={this.startSingularityLogin} />
      
         </KeyboardAwareScrollView>
     );
   }

 
 
   startSingularityLogin = () => {
     console.log('Button Tapped');
     var params = this.Params()
     console.log(params);
     SingularityWrapper.startLogin(params);
   }

   removeListener=()=>{
    this.eventEmitter.removeAllListeners("SingularityListener");
   }

   setListener=()=>{
    // Unregister eventEmitters here
    this.removeListener()

    // Register eventEmitters here
    this.eventEmitter.addListener("SingularityListener",(event)=>{
      console.log(event);
      const rsp=JSON.parse(JSON.stringify(event));
      if(rsp.eventType=="onGetSingularityUserInfo" || rsp.eventType=="onSingularityClose" || rsp.eventType=="onSingularityLogout" || rsp.eventType=="onSingularityError"  ){
        this.displayAlert('response singularity', JSON.stringify(event));
      }
    })
   }

   Params = () => {
    var params = {
      key: this.state.key,
      singularityConfig: {
        environment: parseInt(this.state.environment, 10 )
      }
    }
    return params
   }
 
 
   displayAlert = (title:string, value:string) => {
       console.log('displayAlert ' + title + ' ' + value);
       Alert.alert(title, value);
   }

 
 }
 
 const styles = StyleSheet.create({
   // container: {
   //   flex: 1
   // },
   contentContainerStyle: {
     flex: 2,
     justifyContent: 'center',
     alignItems: 'center',
     backgroundColor: '#F5FCFF',
   },
   welcome: {
     fontSize: 20,
     textAlign: 'center',
     margin: 10,
     marginTop: 50,
     marginBottom: 20
   },
   category: {
     fontSize: 14,
     textAlign: 'left'
   },
   values: {
     fontSize: 14,
     textAlign: 'right',
     flex: 1,
   },
   instructions: {
     textAlign: 'center',
     color: '#333333',
     marginBottom: 5,
   },
   cell: {
     flex: 1,
     flexDirection: 'row',
     justifyContent: 'space-between',
     alignItems: 'center',
     margin: 10,
   },
 });
 
 